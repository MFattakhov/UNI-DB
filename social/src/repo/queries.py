# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: queries.sql
import dataclasses
import datetime
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

# from repo import models  # noqa: F401


GET_ALL_USER_POSTS = """-- name: get_all_user_posts \\:many
SELECT
    p.post_id,
    p.content,
    p.post_date
FROM
    Posts p
    JOIN Users u ON p.user_id = u.user_id
WHERE
    u.username = :p1\\:\\:text
ORDER BY
    p.post_date DESC
"""


@dataclasses.dataclass()
class GetAllUserPostsRow:
    post_id: int
    content: str
    post_date: Optional[datetime.datetime]


GET_AVG_USER_POST_RATING = """-- name: get_avg_user_post_rating \\:many
SELECT
    AVG(pr.rating) AS avg_post_rating
FROM
    Posts p
    JOIN PostRatings pr ON p.post_id = pr.post_id
    JOIN Users u ON p.user_id = u.user_id
WHERE
    u.username = :p1\\:\\:text
"""


GET_MUTUAL_SUBSCRIBERS = """-- name: get_mutual_subscribers \\:many
SELECT
    u_b.username
FROM
    UserSubscriptions us1
    JOIN UserSubscriptions us2 ON us1.user_id_a = us2.user_id_b
    AND us1.user_id_b = us2.user_id_a
    JOIN Users u_a ON us1.user_id_a = u_a.user_id
    JOIN Users u_b ON us1.user_id_b = u_b.user_id
WHERE
    u_a.username = :p1\\:\\:text
"""


GET_USER_FEED_PGE = """-- name: get_user_feed_pge \\:many
WITH
    RankedPosts AS (
        SELECT
            p.post_id,
            p.content,
            p.post_date,
            ROW_NUMBER() OVER (
                ORDER BY
                    p.post_date DESC
            ) AS row_num
        FROM
            Posts p
            JOIN UserSubscriptions us ON p.user_id = us.user_id_b
            JOIN Users u_a ON us.user_id_a = u_a.user_id
        WHERE
            u_a.username = :p1\\:\\:text
    )
SELECT
    post_id,
    content,
    post_date
FROM
    RankedPosts
WHERE
    row_num BETWEEN (:p2\\:\\:int - 1) * :p3\\:\\:int + 1 AND :p2\\:\\:int * :p3\\:\\:int
"""


@dataclasses.dataclass()
class GetUserFeedPgeRow:
    post_id: int
    content: str
    post_date: Optional[datetime.datetime]


GET_USER_POSTS = """-- name: get_user_posts \\:many
SELECT
    p.post_id,
    p.content,
    p.post_date
FROM
    Posts p
    JOIN Users u ON p.user_id = u.user_id
WHERE
    u.username = :p1\\:\\:text
    AND p.post_date BETWEEN :p2\\:\\:timestamp AND :p3\\:\\:timestamp
ORDER BY
    p.post_date DESC
"""


@dataclasses.dataclass()
class GetUserPostsRow:
    post_id: int
    content: str
    post_date: Optional[datetime.datetime]


GET_USER_POSTS_PAGE = """-- name: get_user_posts_page \\:many
WITH
    RankedPosts AS (
        SELECT
            p.post_id,
            p.content,
            p.post_date,
            ROW_NUMBER() OVER (
                ORDER BY
                    p.post_date DESC
            ) AS row_num
        FROM
            Posts p
            JOIN Users u ON p.user_id = u.user_id
        WHERE
            u.username = :p1\\:\\:text
    )
SELECT
    post_id,
    content,
    post_date
FROM
    RankedPosts
WHERE
    row_num BETWEEN (:p2\\:\\:int - 1) * :p3\\:\\:int + 1 AND :p2\\:\\:int * :p3\\:\\:int
"""


@dataclasses.dataclass()
class GetUserPostsPageRow:
    post_id: int
    content: str
    post_date: Optional[datetime.datetime]


GET_USER_SUBSCRIBERS = """-- name: get_user_subscribers \\:many
SELECT
    u_a.username
FROM
    UserSubscriptions us
    JOIN Users u_a ON us.user_id_a = u_a.user_id
    JOIN Users u_b ON us.user_id_b = u_b.user_id
WHERE
    u_b.username = :p1\\:\\:text
"""


GET_USER_SUBSCRIPTIONS = """-- name: get_user_subscriptions \\:many
SELECT
    u_b.username
FROM
    UserSubscriptions us
    JOIN Users u_a ON us.user_id_a = u_a.user_id
    JOIN Users u_b ON us.user_id_b = u_b.user_id
WHERE
    u_a.username = :p1\\:\\:text
"""


GET_USERS_NO_SUBSCRIBERS = """-- name: get_users_no_subscribers \\:many
SELECT
    u.username
FROM
    Users u
    LEFT JOIN UserSubscriptions us ON u.user_id = us.user_id_b
WHERE
    us.user_id_b IS NULL
"""


GET_USERS_NO_SUBSCRIPTIONS = """-- name: get_users_no_subscriptions \\:many
SELECT
    u.username
FROM
    Users u
    LEFT JOIN UserSubscriptions us ON u.user_id = us.user_id_a
WHERE
    us.user_id_a IS NULL
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_all_user_posts(self, *, dollar_1: str) -> Iterator[GetAllUserPostsRow]:
        result = self._conn.execute(
            sqlalchemy.text(GET_ALL_USER_POSTS), {"p1": dollar_1}
        )
        for row in result:
            yield GetAllUserPostsRow(
                post_id=row[0],
                content=row[1],
                post_date=row[2],
            )

    def get_avg_user_post_rating(self, *, dollar_1: str) -> Iterator[float]:
        result = self._conn.execute(
            sqlalchemy.text(GET_AVG_USER_POST_RATING), {"p1": dollar_1}
        )
        for row in result:
            yield row[0]

    def get_mutual_subscribers(self, *, dollar_1: str) -> Iterator[str]:
        result = self._conn.execute(
            sqlalchemy.text(GET_MUTUAL_SUBSCRIBERS), {"p1": dollar_1}
        )
        for row in result:
            yield row[0]

    def get_user_feed_pge(
        self, *, dollar_1: str, dollar_2: int, dollar_3: int
    ) -> Iterator[GetUserFeedPgeRow]:
        result = self._conn.execute(
            sqlalchemy.text(GET_USER_FEED_PGE),
            {"p1": dollar_1, "p2": dollar_2, "p3": dollar_3},
        )
        for row in result:
            yield GetUserFeedPgeRow(
                post_id=row[0],
                content=row[1],
                post_date=row[2],
            )

    def get_user_posts(
        self, *, dollar_1: str, dollar_2: datetime.datetime, dollar_3: datetime.datetime
    ) -> Iterator[GetUserPostsRow]:
        result = self._conn.execute(
            sqlalchemy.text(GET_USER_POSTS),
            {"p1": dollar_1, "p2": dollar_2, "p3": dollar_3},
        )
        for row in result:
            yield GetUserPostsRow(
                post_id=row[0],
                content=row[1],
                post_date=row[2],
            )

    def get_user_posts_page(
        self, *, dollar_1: str, dollar_2: int, dollar_3: int
    ) -> Iterator[GetUserPostsPageRow]:
        result = self._conn.execute(
            sqlalchemy.text(GET_USER_POSTS_PAGE),
            {"p1": dollar_1, "p2": dollar_2, "p3": dollar_3},
        )
        for row in result:
            yield GetUserPostsPageRow(
                post_id=row[0],
                content=row[1],
                post_date=row[2],
            )

    def get_user_subscribers(self, *, dollar_1: str) -> Iterator[str]:
        result = self._conn.execute(
            sqlalchemy.text(GET_USER_SUBSCRIBERS), {"p1": dollar_1}
        )
        for row in result:
            yield row[0]

    def get_user_subscriptions(self, *, dollar_1: str) -> Iterator[str]:
        result = self._conn.execute(
            sqlalchemy.text(GET_USER_SUBSCRIPTIONS), {"p1": dollar_1}
        )
        for row in result:
            yield row[0]

    def get_users_no_subscribers(self) -> Iterator[str]:
        result = self._conn.execute(sqlalchemy.text(GET_USERS_NO_SUBSCRIBERS))
        for row in result:
            yield row[0]

    def get_users_no_subscriptions(self) -> Iterator[str]:
        result = self._conn.execute(sqlalchemy.text(GET_USERS_NO_SUBSCRIPTIONS))
        for row in result:
            yield row[0]


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_all_user_posts(
        self, *, dollar_1: str
    ) -> AsyncIterator[GetAllUserPostsRow]:
        result = await self._conn.stream(
            sqlalchemy.text(GET_ALL_USER_POSTS), {"p1": dollar_1}
        )
        async for row in result:
            yield GetAllUserPostsRow(
                post_id=row[0],
                content=row[1],
                post_date=row[2],
            )

    async def get_avg_user_post_rating(self, *, dollar_1: str) -> AsyncIterator[float]:
        result = await self._conn.stream(
            sqlalchemy.text(GET_AVG_USER_POST_RATING), {"p1": dollar_1}
        )
        async for row in result:
            yield row[0]

    async def get_mutual_subscribers(self, *, dollar_1: str) -> AsyncIterator[str]:
        result = await self._conn.stream(
            sqlalchemy.text(GET_MUTUAL_SUBSCRIBERS), {"p1": dollar_1}
        )
        async for row in result:
            yield row[0]

    async def get_user_feed_pge(
        self, *, dollar_1: str, dollar_2: int, dollar_3: int
    ) -> AsyncIterator[GetUserFeedPgeRow]:
        result = await self._conn.stream(
            sqlalchemy.text(GET_USER_FEED_PGE),
            {"p1": dollar_1, "p2": dollar_2, "p3": dollar_3},
        )
        async for row in result:
            yield GetUserFeedPgeRow(
                post_id=row[0],
                content=row[1],
                post_date=row[2],
            )

    async def get_user_posts(
        self, *, dollar_1: str, dollar_2: datetime.datetime, dollar_3: datetime.datetime
    ) -> AsyncIterator[GetUserPostsRow]:
        result = await self._conn.stream(
            sqlalchemy.text(GET_USER_POSTS),
            {"p1": dollar_1, "p2": dollar_2, "p3": dollar_3},
        )
        async for row in result:
            yield GetUserPostsRow(
                post_id=row[0],
                content=row[1],
                post_date=row[2],
            )

    async def get_user_posts_page(
        self, *, dollar_1: str, dollar_2: int, dollar_3: int
    ) -> AsyncIterator[GetUserPostsPageRow]:
        result = await self._conn.stream(
            sqlalchemy.text(GET_USER_POSTS_PAGE),
            {"p1": dollar_1, "p2": dollar_2, "p3": dollar_3},
        )
        async for row in result:
            yield GetUserPostsPageRow(
                post_id=row[0],
                content=row[1],
                post_date=row[2],
            )

    async def get_user_subscribers(self, *, dollar_1: str) -> AsyncIterator[str]:
        result = await self._conn.stream(
            sqlalchemy.text(GET_USER_SUBSCRIBERS), {"p1": dollar_1}
        )
        async for row in result:
            yield row[0]

    async def get_user_subscriptions(self, *, dollar_1: str) -> AsyncIterator[str]:
        result = await self._conn.stream(
            sqlalchemy.text(GET_USER_SUBSCRIPTIONS), {"p1": dollar_1}
        )
        async for row in result:
            yield row[0]

    async def get_users_no_subscribers(self) -> AsyncIterator[str]:
        result = await self._conn.stream(sqlalchemy.text(GET_USERS_NO_SUBSCRIBERS))
        async for row in result:
            yield row[0]

    async def get_users_no_subscriptions(self) -> AsyncIterator[str]:
        result = await self._conn.stream(sqlalchemy.text(GET_USERS_NO_SUBSCRIPTIONS))
        async for row in result:
            yield row[0]
